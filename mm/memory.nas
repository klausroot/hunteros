[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
[FILE "memory.c"]
	GLOBAL	_mm_head
[SECTION .data]
	ALIGNB	4
_mm_head:
	DD	0
[SECTION .text]
	GLOBAL	_mm_init
_mm_init:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	EAX,ESI
	AND	EAX,3
	JE	L2
	MOV	EDX,ESI
	SUB	EDX,EAX
	MOV	EAX,EDX
	ADD	EAX,4
L3:
	MOV	DWORD [_mm_head],EAX
	ADD	EAX,36
	MOV	EDX,EAX
	AND	EDX,31
	JE	L5
	SUB	EAX,EDX
	ADD	EAX,32
L5:
	MOV	EDX,DWORD [_mm_head]
	MOV	EBX,ECX
	SUB	EAX,EDX
	MOV	DWORD [8+EDX],ECX
	SUB	EBX,EAX
	LEA	ECX,DWORD [28+EDX]
	LEA	EAX,DWORD [EAX+ESI*1]
	MOV	DWORD [EDX],305419896
	MOV	DWORD [4+EDX],ESI
	MOV	DWORD [12+EDX],EBX
	MOV	DWORD [4+ECX],EAX
	MOV	DWORD [EAX],ECX
	MOV	DWORD [8+EAX],EBX
	MOV	DWORD [4+EAX],ECX
	MOV	DWORD [28+EDX],EAX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L2:
	MOV	EAX,ESI
	JMP	L3
	GLOBAL	_mm_space_add
_mm_space_add:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [_mm_head]
	MOV	ECX,DWORD [8+EBP]
	MOV	ESI,DWORD [12+EBP]
	MOV	EDX,DWORD [28+EBX]
	LEA	EAX,DWORD [28+EBX]
	MOV	DWORD [8+ECX],ESI
	CMP	EDX,EAX
	JE	L11
L17:
	CMP	EDX,ECX
	JA	L24
	MOV	EAX,EDX
	ADD	EAX,DWORD [8+EDX]
	CMP	EAX,ECX
	JA	L15
	MOV	EDX,DWORD [EDX]
	LEA	EAX,DWORD [28+EBX]
	CMP	EDX,EAX
	JNE	L17
L11:
	CMP	EDX,ECX
	JBE	L18
L24:
	MOV	EAX,DWORD [4+EDX]
	MOV	DWORD [ECX],EDX
	MOV	DWORD [4+EDX],ECX
	MOV	DWORD [4+ECX],EAX
	MOV	DWORD [EAX],ECX
L20:
	MOV	EAX,DWORD [_mm_head]
	ADD	DWORD [8+EAX],ESI
	ADD	DWORD [12+EAX],ESI
L15:
	POP	EBX
	XOR	EAX,EAX
	POP	ESI
	POP	EBP
	RET
L18:
	LEA	EAX,DWORD [28+EBX]
	MOV	DWORD [ECX],EAX
	MOV	EDX,DWORD [4+EAX]
	MOV	DWORD [4+EAX],ECX
	MOV	DWORD [4+ECX],EDX
	MOV	DWORD [EDX],ECX
	JMP	L20
	GLOBAL	_mm_total
_mm_total:
	PUSH	EBP
	MOV	EDX,DWORD [_mm_head]
	XOR	EAX,EAX
	MOV	EBP,ESP
	TEST	EDX,EDX
	JE	L25
	MOV	EAX,DWORD [12+EDX]
L25:
	POP	EBP
	RET
	GLOBAL	_lmstate
_lmstate:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_lmalloc
_lmalloc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,20
	MOV	EDX,EAX
	AND	EDX,31
	MOV	DWORD [-16+EBP],0
	JE	L31
	SUB	EAX,EDX
	LEA	ECX,DWORD [32+EAX]
L32:
	MOV	ESI,DWORD [_mm_head]
	MOV	EDI,ECX
	MOV	EBX,DWORD [28+ESI]
	LEA	EAX,DWORD [28+ESI]
	CMP	EBX,EAX
	JE	L47
L38:
	MOV	EBX,DWORD [EBX]
	LEA	EAX,DWORD [28+ESI]
	CMP	EBX,EAX
	JNE	L38
L47:
	TEST	EBX,EBX
	JE	L39
	LEA	EAX,DWORD [12+ECX]
	MOV	EDX,DWORD [8+EBX]
	CMP	EDX,EAX
	JBE	L40
	LEA	EAX,DWORD [ECX+EBX*1]
	SUB	EDX,ECX
	MOV	ECX,DWORD [4+EBX]
	MOV	DWORD [8+EAX],EDX
	MOV	EDX,DWORD [EBX]
	MOV	DWORD [EAX],EDX
	MOV	DWORD [ECX],EAX
	MOV	DWORD [4+EDX],EAX
	MOV	DWORD [4+EAX],ECX
L42:
	MOV	DWORD [12+EBX],EDI
	MOV	DWORD [EBX],1437226410
	MOV	DWORD [16+EBX],-1437226411
	LEA	EAX,DWORD [4+EBX]
	SUB	DWORD [12+ESI],EDI
	MOV	DWORD [4+EBX],EAX
	ADD	EBX,20
	MOV	DWORD [4+EAX],EAX
	MOV	DWORD [-16+EBP],EBX
L39:
	MOV	EAX,DWORD [-16+EBP]
	POP	EDX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L40:
	MOV	EAX,DWORD [EBX]
	MOV	EDI,EDX
	MOV	EDX,DWORD [4+EBX]
	MOV	DWORD [4+EAX],EDX
	MOV	DWORD [EDX],EAX
	JMP	L42
L31:
	MOV	ECX,EAX
	JMP	L32
	GLOBAL	_lrealloc
_lrealloc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EAX,DWORD [12+EBP]
	MOV	EDI,DWORD [8+EBP]
	ADD	EAX,20
	MOV	EDX,EAX
	LEA	ESI,DWORD [-20+EDI]
	AND	EDX,31
	JE	L51
	SUB	EAX,EDX
	LEA	EBX,DWORD [32+EAX]
L52:
	MOV	EDX,DWORD [12+ESI]
	CMP	EDX,EBX
	JB	L56
	MOV	EAX,EDX
	SUB	EAX,EBX
	CMP	EAX,40
	JAE	L57
L48:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EDI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L57:
	LEA	EAX,DWORD [EBX+ESI*1]
	MOV	ECX,EBX
	SUB	ECX,EDX
	LEA	EDX,DWORD [4+EAX]
	MOV	DWORD [12+EAX],ECX
	MOV	DWORD [EAX],1437226410
	MOV	DWORD [4+EAX],EDX
	MOV	DWORD [16+EAX],-1437226411
	ADD	EAX,20
	MOV	DWORD [4+EDX],EDX
	PUSH	EAX
	CALL	_lfree
	MOV	DWORD [12+ESI],EBX
	JMP	L48
L56:
	PUSH	EDI
	CALL	_lfree
	POP	ESI
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_lmalloc
L51:
	MOV	EBX,EAX
	JMP	L52
	GLOBAL	_lzalloc
_lzalloc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	DWORD [8+EBP]
	CALL	_lmalloc
	POP	EDX
	LEAVE
	RET
	GLOBAL	_lfree
_lfree:
	PUSH	EBP
	MOV	EDX,DWORD [_mm_head]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ECX,DWORD [28+EDX]
	SUB	EBX,20
	MOV	EAX,DWORD [12+EBX]
	MOV	DWORD [8+EBX],EAX
	LEA	EAX,DWORD [28+EDX]
	CMP	ECX,EAX
	JE	L82
L72:
	CMP	ECX,EBX
	JA	L83
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+ECX]
	CMP	EAX,EBX
	JA	L60
	MOV	ECX,DWORD [ECX]
	LEA	EAX,DWORD [28+EDX]
	CMP	ECX,EAX
	JNE	L72
L82:
	MOV	EAX,DWORD [_mm_head]
	ADD	EAX,28
	MOV	EDX,DWORD [4+EAX]
L85:
L71:
	MOV	DWORD [4+EAX],EBX
	MOV	DWORD [EBX],EAX
	MOV	DWORD [4+EBX],EDX
	MOV	DWORD [EDX],EBX
	MOV	EDX,DWORD [4+EBX]
	MOV	ESI,DWORD [EBX]
	MOV	ECX,DWORD [8+EDX]
	LEA	EAX,DWORD [ECX+EDX*1]
	CMP	EAX,EBX
	JE	L86
L75:
	MOV	EDX,DWORD [8+EBX]
	LEA	EAX,DWORD [EDX+EBX*1]
	CMP	EAX,ESI
	JE	L87
L78:
	MOV	EDX,DWORD [_mm_head]
	MOV	EAX,DWORD [8+EBX]
	ADD	DWORD [12+EDX],EAX
L68:
L60:
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L87:
	ADD	EDX,DWORD [8+EAX]
	MOV	DWORD [8+EBX],EDX
	MOV	EDX,DWORD [4+EAX]
	MOV	EAX,DWORD [EAX]
	MOV	DWORD [EDX],EAX
	MOV	DWORD [4+EAX],EDX
	JMP	L78
L86:
	ADD	ECX,DWORD [8+EBX]
	MOV	DWORD [4+ESI],EDX
	MOV	DWORD [EDX],ESI
	MOV	DWORD [8+EDX],ECX
	JMP	L75
L83:
	MOV	EDX,DWORD [4+ECX]
	MOV	EAX,DWORD [ECX]
	JMP	L85
